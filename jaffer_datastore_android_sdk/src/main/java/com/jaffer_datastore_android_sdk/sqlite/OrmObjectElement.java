/** * OrmObjectElement.java * * Copyright (c) 2008-2014 Joy Aether Limited. All rights reserved. * * Unauthorized copying of this file, via any medium is strictly prohibited. *  * This unpublished material is proprietary to Joy Aether Limited. * All rights reserved. The methods and * techniques described herein are considered trade secrets * and/or confidential. Reproduction or distribution, in whole * or in part, is forbidden except by express written permission * of Joy Aether Limited. */package com.jaffer_datastore_android_sdk.sqlite;import java.io.File;import java.lang.reflect.Field;import java.lang.reflect.Type;import java.math.BigDecimal;import java.math.BigInteger;import java.net.URI;import java.net.URL;import java.sql.SQLException;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.restlet.representation.Representation;import android.util.Log;import com.google.gson.internal.$Gson$Types;import com.google.gson.reflect.TypeToken;import com.j256.ormlite.dao.Dao;import com.j256.ormlite.dao.ForeignCollection;import com.j256.ormlite.field.ForeignCollectionField;import com.j256.ormlite.support.ConnectionSource;import com.jaffer_datastore_android_sdk.DatastoreException.DatastoreException;import com.jaffer_datastore_android_sdk.datastore.ArrayElement;import com.jaffer_datastore_android_sdk.datastore.Build;import com.jaffer_datastore_android_sdk.datastore.DataElement;import com.jaffer_datastore_android_sdk.datastore.NullElement;import com.jaffer_datastore_android_sdk.datastore.ObjectElement;import com.jaffer_datastore_android_sdk.datastore.PrimitiveElement;import com.jaffer_datastore_android_sdk.representation.ModelRepresentation;import com.jaffer_datastore_android_sdk.schema.Model;import com.jaffer_datastore_android_sdk.schema.ModelAttributes;import com.jaffer_datastore_android_sdk.schema.QueryDeserializer;import com.jaffer_datastore_android_sdk.schema.QueryDeserializerFactory;import com.jaffer_datastore_android_sdk.schema.QueryDeserializers;import com.jaffer_datastore_android_sdk.schema.Schema;import com.jaffer_datastore_android_sdk.serialization.ForeignCollectionInstanceCreator;import com.jaffer_datastore_android_sdk.serialization.ModelSerializationPolicy;import com.jaffer_datastore_android_sdk.serialization.ModelSerializationStrategy;/** * An implementation of {@link ObjectElement} that wraps a {@link Model}. *  * @param <T> the type of the data model this element wraps */@SuppressWarnings("rawtypes")public class OrmObjectElement<T extends Model> extends ObjectElement {		private static final String TAG = OrmObjectElement.class.getSimpleName();		/**	 * A list of value deserializer factory.	 */	private static final List<QueryDeserializerFactory> FACTORIES = new ArrayList<QueryDeserializerFactory>();	static {		FACTORIES.add(QueryDeserializers.STRING_FACTORY);		FACTORIES.add(QueryDeserializers.BIG_DECIMAL_FACTORY);		FACTORIES.add(QueryDeserializers.BIG_INTEGER_FACTORY);		FACTORIES.add(QueryDeserializers.BOOLEAN_FACTORY);		FACTORIES.add(QueryDeserializers.BYTE_FACTORY);		FACTORIES.add(QueryDeserializers.DOULBE_FACTORY);		FACTORIES.add(QueryDeserializers.FLOAT_FACTORY);		FACTORIES.add(QueryDeserializers.INET_ADDRESS_FACTORY);		FACTORIES.add(QueryDeserializers.INTEGER_FACTORY);		FACTORIES.add(QueryDeserializers.LONG_FACTORY);		FACTORIES.add(QueryDeserializers.NUMBER_FACTORY);		FACTORIES.add(QueryDeserializers.SHORT_FACTORY);		FACTORIES.add(QueryDeserializers.URI_FACTORY);		FACTORIES.add(QueryDeserializers.URL_FACTORY);		FACTORIES.add(QueryDeserializers.UUID_FACTORY);		FACTORIES.add(QueryDeserializers.ENUM_FACTORY);		FACTORIES.add(QueryDeserializers.newFactory(Date.class, QueryDeserializers.DATE));		FACTORIES.add(QueryDeserializers.newFactory(Timestamp.class, QueryDeserializers.DATE));		FACTORIES.add(QueryDeserializers.newFactory(java.sql.Date.class, QueryDeserializers.DATE));	}		/** The underlying data model object. */	T model;		/** The serialization policy of the {@link Model}. */	private ModelSerializationStrategy serializationStrategy =		ModelSerializationPolicy.DEFAULT.disableIdFieldOnlySerialization();		/** A Map of value deserializers. */	private final Map<TypeToken<?>, QueryDeserializer<?>> deserializers =		new HashMap<TypeToken<?>, QueryDeserializer<?>>();		/**	 * Constructor.	 */	public OrmObjectElement() {		this(null);	}		/**	 * Creates a new instance of {@link OrmObjectElement} with the given data model.	 * 	 * @param model The underlying data model	 */	public OrmObjectElement(T model) {		this.model = model;	}		/**	 * Specifies the policy to use when serializing this element.	 * 	 * @param strategy The serialization policy to use to serialize this element	 */	public void setSerializationStrategy(ModelSerializationStrategy strategy) {		serializationStrategy = strategy;	}		/**	 * Returns the strategy used to serialize this element.	 * 	 * @return The {@link ModelSerializationStrategy} to use to 	 */	protected ModelSerializationStrategy getSerializationStrategy() {		return serializationStrategy;	}/**	 * Returns the underlying data model of this data object.	 * 	 * @return The underlying {@link Model} of this data object	 */	protected T getModel() {		return model;	}		@Override	public boolean has(List<String> memberPath) {		return get(memberPath) != null;	}	@SuppressWarnings({ "unchecked" })	@Override	public DataElement get(List<String> memberPath) {		try {			Object data = model == null ? null : model.getFieldValue(memberPath);			if (data instanceof ForeignCollection) {				OrmCollectionElement result = new OrmCollectionElement((ForeignCollection<?>) data);				result.setSerializationStrategy(getSerializationStrategy(memberPath));				return result;			} else if (data instanceof Model) {				if (!((Model) data).refreshed() && shouldRefreshField(memberPath)) {					try {						((Model) data).refresh();					} catch (SQLException ex) {						// Ignore					}				}				OrmObjectElement result = new OrmObjectElement((Model<?, ?>) data);				result.setSerializationStrategy(getSerializationStrategy(memberPath));				return result;			} else if (data != null && OrmPrimitiveElement.isOrmPrimitive(data)) {				return new OrmPrimitiveElement(data);			} else {				return NullElement.INSTANCE;			}		} catch (DatastoreException ex) {			// The database field is not found. We return {@code null}		}		return null;	}		/**	 * Returns whether or not a given member field should be refreshed. Whether	 * or not a field should be refreshed is determined by the serialization	 * strategy. If a serialization strategy was not defined for the parent	 * object of the given field, a field should not be refreshed.	 * 	 * @param path	 *            the path to a member field	 * @return {@code true} if the field should be refreshed from the underlying	 *         data store, {@code false} otherwise	 */	private boolean shouldRefreshField(List<String> path) {		Field field = null;		ModelSerializationStrategy strategy = getSerializationStrategy();				if (path != null && getModel() != null) {			ModelAttributes attrs = Schema.getAttributes(getModel().getClass());			Iterator<String> itr = path.iterator();			while (itr.hasNext() && strategy != null && attrs != null) {				String member = itr.next();				field = attrs.getColumns().get(member);				if (member.equals(path.get(path.size() - 1))) {					return strategy == null ? false : strategy.shouldRefreshField(field);				} else {										strategy = strategy == null ? null : strategy.getFieldSerializationStrategy(field);				}			}		}				return false;	}		/**	 * Returns the serialization strategy for the given member {@code path}.	 * 	 * @param path the member path to the property 	 * @return the serialization strategy to use when serializing the given member property	 */	private ModelSerializationStrategy getSerializationStrategy(List<String> path) {		Field field = null;		ModelSerializationStrategy strategy = getSerializationStrategy();				if (path != null && getModel() != null) {			Class clazz = getModel().getClass();			ModelAttributes attrs = Schema.getAttributes(clazz);						Iterator<String> itr = path.iterator();			while (itr.hasNext() && attrs != null && strategy != null) {				String member = itr.next();				field = attrs.getColumns().get(member);				strategy = strategy == null ? null : strategy.getFieldSerializationStrategy(field);										if (attrs.isForeignField(member)) {										attrs = Schema.getAttributes(field.getType());				} else if (attrs.isForeignCollection(member)) {					TypeToken<?> typeToken = TypeToken.get(field.getType());					Type type = typeToken.getType();					Class<?> rawType = typeToken.getRawType();										final Type elementType = $Gson$Types.getCollectionElementType(type, rawType);					TypeToken<?> elementTypeToken = TypeToken.get(elementType);					attrs = Schema.getAttributes(elementTypeToken.getRawType());				} else {					attrs = null;				}			}		} else {			// Returns the default serialization strategy			strategy = null;		}				return strategy == null ? ModelSerializationPolicy.DEFAULT.disableIdFieldOnlySerialization() : strategy;	}		/**	 * Returns the deserializer for the given type.	 * 	 * @param <T>	 *            the Java type of the data to query	 * @param type	 *            the type of in which to return the deserializer	 * @return the deserializer for the given type	 */	private QueryDeserializer<?> getDeserializer(TypeToken<?> type) {		QueryDeserializer<?> deserializer = deserializers.get(type);		if (deserializer != null) {			return deserializer;		}				for (QueryDeserializerFactory factory : FACTORIES) {			QueryDeserializer<?> candidate = factory.create(type);			if (candidate != null) {				deserializers.put(type, candidate);				return candidate;			}		}				return QueryDeserializers.DEFAULT;	}		/**	 * Returns the deserializer for the given type.	 * @param <T>	 *            the Java type of the data to query	 * @param type the type of in which to return the deserializer	 * @return the deserializer for the given type	 */	private QueryDeserializer<?> getDeserializer(Class<?> type) {		return getDeserializer(TypeToken.get(type));	}		/**	 * Specifies the value of a member in the underlying data model.	 * 	 * @param property the name of the field to specify in the data model	 * @param value the new value	 */	private void setValue(String property, Object value) {		if (model != null) {						ModelAttributes attrs = Schema.getAttributes(model.getClass());			Field field = attrs.getColumns().get(property);			if (field != null) {				QueryDeserializer<?> deserializer = getDeserializer(field.getType());				model.setFieldValue(property, deserializer.deserialize(value, attrs.getColumnType(property)));			}		}	}		@Override	public String[] allKeys() {		List<String> keys = new ArrayList<String>();		if (model != null) {						ModelAttributes attrs = Schema.getAttributes(model.getClass());			keys.addAll(attrs.getColumns().keySet());		}				String[] result = new String[keys.size()];		return keys.toArray(result);	}	@Override	public void set(String property, String value) {		setValue(property, value);	}	@Override	public void set(String property, Number value) {		setValue(property, value);	}	@Override	public void set(String property, Boolean value) {		setValue(property, value);	}	@Override	public void set(String property, Character value) {		setValue(property, value);	}		@Override	public void set(String property, Date value) {		setValue(property, value);	}		@Override	public void set(String property, File value) {		if (model != null) {			ModelAttributes attrs = Schema.getAttributes(model.getClass());			if (attrs.isBlobField(property)) {				Object val = null;				Class<?> clazz = attrs.getColumnType(property);				if (String.class.isAssignableFrom(clazz)) {					val = value.toURI().toString();				} else if (URI.class.isAssignableFrom(clazz)) {					val = value.toURI();				} else if (URL.class.isAssignableFrom(clazz)) {					try {						val = value.toURI().toURL();					} catch (Exception ex) {						// Ignored					}				} else if (File.class.isAssignableFrom(clazz)) {					val = value;				}				model.setFieldValue(property, val);			}		}	}		@SuppressWarnings({ "unchecked" })	@Override	public void set(String property, DataElement element) {		if (getModel() != null && property != null) {			if (element instanceof OrmObjectElement) {				OrmObjectElement orm = (OrmObjectElement) element;				getModel().setFieldValue(property, orm.getModel());			} else if (element instanceof OrmCollectionElement) {				OrmCollectionElement col = (OrmCollectionElement) element;				if (col.col instanceof ForeignCollection) {					getModel().setFieldValue(property, col.col);				} else {					// Add individual item in the underlying collection to the					// {@link ForeignCollection}					ForeignCollection fCollection = getForeignCollection(property);					if (fCollection != null) {						try {							fCollection.addAll(col.col);						} catch (Exception e) {							// Ignored. We cannot add elements in the collection. 							if (Build.DEBUG) {								Log.e(TAG, "Failed to add elements in an OrmCollectionElement to foreign collection.", e);							}						}					}					getModel().setFieldValue(property, fCollection);				}			} else if (element.isObject()) {				String json = element.toJson();				Class<?> clazz = Schema.getAttributes(getModel().getClass()).getColumnType(property);								Dao dao = getModel().getDao();				ConnectionSource cs = dao == null ? null : dao.getConnectionSource();				ForeignCollectionInstanceCreator creator = dao == null ? null : new ForeignCollectionInstanceCreator(cs);				Model data = (Model) Model.fromJson(json, creator, clazz);				getModel().setFieldValue(property, data);			} else if (element.isPrimitive()) {				ModelAttributes attrs = Schema.getAttributes(getModel().getClass());				getModel().setFieldValue(property, getValueForType(element.asPrimitiveElement(), attrs.getColumnType(property)));			} else if (element.isNull()) {				getModel().setFieldValue(property, null);			} else if (element.isArray()) {				// Add individual {@link DataElement} in the {@link ArrayElement}				// to the {@link ForeignCollection}				ForeignCollection fCollection = getForeignCollection(property);				if (fCollection != null) {					ModelAttributes attrs = Schema.getAttributes(getModel().getClass());					Type type = attrs.getFieldGenericType(property);										ArrayElement array = element.asArrayElement();					for (int i = 0; i < array.size(); i++) {						DataElement e = array.get(i);						Dao dao = getModel().getDao();						ConnectionSource cs = dao == null ? null : dao.getConnectionSource();						ForeignCollectionInstanceCreator creator = dao == null ? null : new ForeignCollectionInstanceCreator(cs);						Model data = (Model) Model.fromJson(e.toJson(), creator, (Class<?>) type);						if (data != null) {							fCollection.add(data);						}					}				}				getModel().setFieldValue(property, fCollection);			}		}	}	/**	 * Creates an empty collection for the given field in the {@link Model}. The	 * field identified must be a {@link ForeignCollection}	 * 	 * @param property	 *          The name of the field in the {@link Model} to create the	 *          collection.	 * @return A {@link PassiveForeingCollection}, {@code null} if a collection cannot be created	 */	private ForeignCollection getForeignCollection(String property) {		ForeignCollection result = null;			if (model != null) {				Dao dao = model.getDao();				ModelAttributes attrs = Schema.getAttributes(model.getClass());				if (dao != null && attrs.isForeignCollection(property)) {					Type type = attrs.getFieldGenericType(property);					Field field = attrs.getColumns().get(property);					ForeignCollectionField fcField = field.getAnnotation(ForeignCollectionField.class);					ConnectionSource cs = dao.getConnectionSource();					ForeignCollectionInstanceCreator creator = new ForeignCollectionInstanceCreator(cs);					result = creator.createInstance(type, model, fcField.columnName(), fcField.orderColumnName(), fcField.orderAscending());				}		}				return result;	}	/**	 * Returns the value of a primitive as the given type.	 * 	 * @param element	 *          The primitive element to retrieve the value from	 * @param type	 *          The Java type to return	 * @return The value of the primitive	 */	private Object getValueForType(PrimitiveElement element, Class<?> type) {		Object result = null;				if (element != null) {			if (Boolean.class.isAssignableFrom(type) || boolean.class.isAssignableFrom(type)) {				result = element.valueAsBoolean();			} else if (Integer.class.isAssignableFrom(type) || int.class.isAssignableFrom(type)) {				result = element.valueAsInt();			} else if (Long.class.isAssignableFrom(type) || long.class.isAssignableFrom(type)) {				result = element.valueAsLong();			} else if (Short.class.isAssignableFrom(type) || short.class.isAssignableFrom(type)) {				result = element.valueAsShort();			} else if (Float.class.isAssignableFrom(type) || float.class.isAssignableFrom(type)) {				result = element.valueAsFloat();			} else if (Double.class.isAssignableFrom(type) || double.class.isAssignableFrom(type)) {				result = element.valueAsDouble();			} else if (Byte.class.isAssignableFrom(type) || byte.class.isAssignableFrom(type)) {				result = element.valueAsByte();			} else if (Character.class.isAssignableFrom(type) || char.class.isAssignableFrom(type)) {				result = element.valueAsCharacter();			} else if (BigDecimal.class.isAssignableFrom(type)) {				result = element.valueAsBigDecimal();			} else if (BigInteger.class.isAssignableFrom(type)) {				result = element.valueAsBigInteger();			} else if (String.class.isAssignableFrom(type)) {				result = element.valueAsString();			}		}				return result;	}		@Override	public String toString() {		return toJson();	}	@Override	public String toJson() {		if (model != null) {			if (serializationStrategy == null) {				return model.toJson();			} else {				return model.toJson(getSerializationStrategy());			}		}		return NullElement.INSTANCE.toString();	}		@Override	public Representation toRepresentation() {		return new ModelRepresentation(model, getSerializationStrategy());	}		@Override	public int hashCode() {		return model == null ? super.hashCode() : model.hashCode();	}		@Override	public boolean equals(Object obj) {		if (this == obj) {			return true;		}				if (obj == null || getClass() != obj.getClass()) {			return false;		}				OrmObjectElement other = (OrmObjectElement) obj;		if (model == null) {			return other.model == null;		}				return model.equals(other.model);	}}